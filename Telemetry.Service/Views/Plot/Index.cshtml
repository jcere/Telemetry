
@{
    ViewBag.Title = "Plot";
}

<h2>Plot</h2>
<p>
    <input id="btnGetData" type="button" value="Get Data" />
</p>

<script>

    $(document).ready(function () {
        $('#btnGetData').click(function () {
            $.ajax({
                type: 'GET',
                url: '@Url.RouteUrl("ActionApi", new { httproute = "", controller = "Temp" })',
                success: function (data) {
                    plotFunction1(data);
                },
                dataType: "json"
            });
        });
    });

    function plotFunction1(jsonObj) {

        var ctx = document.getElementById("myChart").getContext("2d");
        var tempData = jsonObj.Data.Data;
        // jQuery.map:
        var y = tempData.map(function (v) {
            return v.TempC;
        });

        var x = tempData.map(function (v) {
            return v.DateTime;
        });

        var options = Chart.defaults.global = {
            // String - Template string for single tooltips
            // Boolean - Whether to animate the chart
            animation: true,

            // Number - Number of animation steps
            animationSteps: 60,

            // String - Animation easing effect
            // Possible effects are:
            // [easeInOutQuart, linear, easeOutBounce, easeInBack, easeInOutQuad,
            //  easeOutQuart, easeOutQuad, easeInOutBounce, easeOutSine, easeInOutCubic,
            //  easeInExpo, easeInOutBack, easeInCirc, easeInOutElastic, easeOutBack,
            //  easeInQuad, easeInOutExpo, easeInQuart, easeOutQuint, easeInOutCirc,
            //  easeInSine, easeOutExpo, easeOutCirc, easeOutCubic, easeInQuint,
            //  easeInElastic, easeInOutSine, easeInOutQuint, easeInBounce,
            //  easeOutElastic, easeInCubic]
            animationEasing: "easeOutQuart",

            // Boolean - If we should show the scale at all
            showScale: true,

            // Boolean - If we want to override with a hard coded scale
            scaleOverride: false,

            // ** Required if scaleOverride is true **
            // Number - The number of steps in a hard coded scale
            scaleSteps: null,
            // Number - The value jump in the hard coded scale
            scaleStepWidth: null,
            // Number - The scale starting value
            scaleStartValue: null,

            // String - Colour of the scale line
            scaleLineColor: "rgba(0,0,0,.1)",

            // Number - Pixel width of the scale line
            scaleLineWidth: 1,

            // Boolean - Whether to show labels on the scale
            scaleShowLabels: true,

            // Interpolated JS string - can access value
            scaleLabel: "<%=value%>",

            // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
            scaleIntegersOnly: true,

            // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
            scaleBeginAtZero: false,

            // String - Scale label font declaration for the scale label
            scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

            // Number - Scale label font size in pixels
            scaleFontSize: 12,

            // String - Scale label font weight style
            scaleFontStyle: "normal",

            // String - Scale label font colour
            scaleFontColor: "#666",

            // Boolean - whether or not the chart should be responsive and resize when the browser does.
            responsive: false,

            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,

            // Boolean - Determines whether to draw tooltips on the canvas or not
            showTooltips: true,

            // Function - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-custom-tooltips))
            customTooltips: false,

            // Array - Array of string names to attach tooltip events
            tooltipEvents: ["mousemove", "touchstart", "touchmove"],

            // String - Tooltip background colour
            tooltipFillColor: "rgba(0,0,0,0.8)",

            // String - Tooltip label font declaration for the scale label
            tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

            // Number - Tooltip label font size in pixels
            tooltipFontSize: 14,

            // String - Tooltip font weight style
            tooltipFontStyle: "normal",

            // String - Tooltip label font colour
            tooltipFontColor: "#fff",

            // String - Tooltip title font declaration for the scale label
            tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

            // Number - Tooltip title font size in pixels
            tooltipTitleFontSize: 14,

            // String - Tooltip title font weight style
            tooltipTitleFontStyle: "bold",

            // String - Tooltip title font colour
            tooltipTitleFontColor: "#fff",

            // Number - pixel width of padding around tooltip text
            tooltipYPadding: 6,

            // Number - pixel width of padding around tooltip text
            tooltipXPadding: 6,

            // Number - Size of the caret on the tooltip
            tooltipCaretSize: 8,

            // Number - Pixel radius of the tooltip border
            tooltipCornerRadius: 6,

            // Number - Pixel offset from point x to tooltip edge
            tooltipXOffset: 10,

            // String - Template string for single tooltips
            tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",

            // String - Template string for multiple tooltips
            multiTooltipTemplate: "<%= value %>",

            // Function - Will fire on animation progression.
            onAnimationProgress: function(){},

            // Function - Will fire on animation completion.
            onAnimationComplete: function(){},
            ///Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: true,

            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",

            //Number - Width of the grid lines
            scaleGridLineWidth: 1,

            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,

            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,

            //Boolean - Whether the line is curved between points
            bezierCurve: true,

            //Number - Tension of the bezier curve between points
            bezierCurveTension: 0.4,

            //Boolean - Whether to show a dot for each point
            pointDot: true,

            //Number - Radius of each point dot in pixels
            pointDotRadius: 4,

            //Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,

            //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,

            //Boolean - Whether to show a stroke for datasets
            datasetStroke: true,

            //Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,

            //Boolean - Whether to fill the dataset with a colour
            datasetFill: true,

            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

        };

        var data = {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets: [
                {
                    label: "My First dataset",
                    fillColor: "rgba(220,220,220,0.2)",
                    strokeColor: "rgba(220,220,220,1)",
                    pointColor: "rgba(220,220,220,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(220,220,220,1)",
                    data: [65, 59, 80, 81, 56, 55, 40]
                }
            ]
        };

        var myLineChart = new Chart(ctx).Line(data, options);
    };

    //function plotFunction(jsonObj) {

    //    var tempData = jsonObj.Data.Data;

    //    // define dimensions of graph
    //    var m = [80, 80, 80, 80]; // margins
    //    var w = 1000 - m[1] - m[3]; // width
    //    var h = 400 - m[0] - m[2]; // height

    //    // create a simple data array that we'll plot with a line (this array represents only the Y values, 
    //    // X will just be the index location) jQuery.map:
    //    var data = tempData.map(function (v) {
    //        return v.TempC;
    //    });

    //    // X scale will fit all values from data[] within pixels 0-w
    //    var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
    //    // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
    //    var y = d3.scale.linear().domain([10, 125]).range([h, 0]);

    //    // create a line function that can convert data[] into x and y points
    //    var line = d3.svg.line()
	//		// assign the X function to plot our line as we wish
	//		.x(function (d, i) {
	//		    // return the X coordinate where we want to plot this datapoint     
	//		    return x(i);
	//		})
	//		.y(function (d) {
    //            // return the Y coordinate where we want to plot this datapoint
	//		    return y(d);
	//		})

    //    // Add an SVG element with the desired dimensions and margin.
    //    var graph = d3.select("#output").append("svg:svg")
    //          .attr("width", w + m[1] + m[3])
    //          .attr("height", h + m[0] + m[2])
    //        .append("svg:g")
    //          .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

    //    // create yAxis
    //    var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
    //    // Add the x-axis.
    //    graph.append("svg:g")
    //          .attr("class", "x axis")
    //          .attr("transform", "translate(0," + h + ")")
    //          .call(xAxis);


    //    // create left yAxis
    //    var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
    //    // Add the y-axis to the left
    //    graph.append("svg:g")
    //          .attr("class", "y axis")
    //          .attr("transform", "translate(-25,0)")
    //          .call(yAxisLeft);

    //    // Add the line by appending an svg:path element with the data line we created above
    //    // do this AFTER the axes above so that the line is above the tick-lines
    //    graph.append("svg:path").attr("d", line(data));

    //    // automatically determining max range can work something like this
    //    // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
    //};

</script>
<canvas id="myChart" width="400" height="400"></canvas>

@*<div id="output">
</div>*@


